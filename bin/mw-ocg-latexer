#!/usr/bin/env node
require('when/monitor/console'); // early debugging of promise errors

if (/v0\.[0-7]\./.test(process.version)) {
	console.error('Node version', process.version, 'is not supported.');
	process.exit(1);
}

var program = require('commander');
var latexer = require('../');
var util = require('util');

program
	.version(latexer.version)
	.usage('[options] <bundle.zip>')
	.option('-o, --output <filename>',
			'Save PDF to the given <filename>', null)
	.option('-s, --size <letter|a4>',
			'Set paper size', 'letter')
	.option('-t, --toc <yes|no|auto>',
			'Force presence/absence of table of contents [auto]', 'auto')
	.option('-L, --lang <2-char lang code>',
			'Force collection to use the given default language', null)
	.option('-1, --one-column',
			'Render page in single column layout')
	.option('-v, --verbose',
			'Print verbose progress information')
	.option('-l, --latex',
			'Output LaTeX source instead of PDF')
	.option('-D, --debug',
			'Turn on debugging features (eg, full stack traces on exceptions)')
	.option('--syslog',
			'Log errors using syslog (for production deployments)');

program.parse(process.argv);

if (program.args.length === 0) {
	console.error('A bundle filename is required.');
	return 1;
}
if (program.args.length > 1) {
	console.error('Too many arguments.');
	return 1;
}

var bundlefile = program.args[0];

var Syslog = program.syslog ? require('node-syslog') : {
	init: function() { },
	log: function() { },
	close: function() { }
};
Syslog.init(latexer.name, Syslog.LOG_PID|Syslog.LOG_ODELAY, Syslog.LOG_LOCAL0);

var log = function() {
	// en/disable log messages here
	if (program.verbose || program.debug) {
		console.error.apply(console, arguments);
	}
	try {
		Syslog.log(Syslog.LOG_INFO, util.format.apply(this, arguments));
	} catch (err) {
		// This should never happen!  But don't try to convert arguments
		// toString() if it does, since that might fail too.
		Syslog.log(Syslog.LOG_ERR, "Could not format message! "+err);
	}
};

var options = {
	bundle: bundlefile,
	size: program.size,
	latex: !!program.latex,
	debug: !!program.debug,
	output: program.output,
	lang: program.lang,
	onecolumn: program.oneColumn,
	log: log
};

if (program.toc !== 'auto') {
	options.toc = !/^(no|false|off)$/i.test(program.toc);
}

latexer.convert(options).then(function(status) {
	Syslog.close();
	process.exit(status);
}, function(err) {
	if (program.debug && err.stack) {
		console.error(err.stack);
		Syslog.log(Syslog.LOG_ERR, err.stack);
	} else {
		console.error(err);
		Syslog.log(Syslog.LOG_ERR, err);
	}
	Syslog.close();
	process.exit(1);
}).done();
